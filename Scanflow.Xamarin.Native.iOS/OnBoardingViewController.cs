// This file has been autogenerated from a class added in the UI designer.

using System;
using CarPlay;
using CoreAudioKit;
using CoreFoundation;
using CoreGraphics;
using Foundation;
using Scanflow.Xamarin.Native.iOS.Models;
using UIKit;

namespace Scanflow.Xamarin.Native.iOS
{
    public partial class OnBoardingViewController : UIViewController
    {
        private nfloat scrollWidth;
        private nfloat scrollHeight;
        private readonly UIImage[] onboardImages = { UIImage.FromBundle(AppImages.Onboarding1), UIImage.FromBundle(AppImages.Onboarding2), UIImage.FromBundle(AppImages.Onboarding3), UIImage.FromBundle(AppImages.Onboarding4) };
        private readonly UIImage[] skipImages = { UIImage.FromBundle(AppImages.Skip1), UIImage.FromBundle(AppImages.Skip2), UIImage.FromBundle(AppImages.Skip3), UIImage.FromBundle(AppImages.Skip4) };
        private readonly string[] onboardDescriptions = { AppStrings.DescriptionIdScan, AppStrings.DescriptionARmeasurement, AppStrings.DescriptionTextCapture, AppStrings.DescriptionBarcode
    };

        private UIScrollView myscrollView;
        private UIImageView myskipButton;
        public OnBoardingViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            myscrollView = new UIScrollView(new CGRect(0, 0, View.Frame.Width, View.Frame.Height));
            myscrollView.Delegate = new ScrollViewDelegate(this);
            myscrollView.PagingEnabled = true;
            myscrollView.ShowsHorizontalScrollIndicator = false;
            myscrollView.ShowsVerticalScrollIndicator = false;
            myscrollView.ContentSize = new CGSize(View.Frame.Width * onboardImages.Length, View.Frame.Height);
            View.AddSubview(myscrollView);

            // Create and configure the page control
            pageControl = new UIPageControl();
            pageControl.Frame = new CGRect(0, View.Frame.Height - 30, View.Frame.Width, 30);
            pageControl.Hidden = true;
            pageControl.Pages = onboardImages.Length;
            pageControl.CurrentPage = 0;
            View.AddSubview(pageControl);

            var tapGestureRecognizer = new UITapGestureRecognizer(HandleImageTapped);

            // Attach the tap gesture recognizer to the imageView
            myscrollView.UserInteractionEnabled = true;
            myscrollView.AddGestureRecognizer(tapGestureRecognizer);
            // Add your content views to the scroll view
            SetUpScrollView();
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
            NavigationController.NavigationBarHidden = true;
        }
        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
            scrollWidth = myscrollView.Frame.Size.Width;
            scrollHeight = myscrollView.Frame.Size.Height;
        }

     
        private void SetUpScrollView()
        {
            scrollWidth = (float)scrollView.Frame.Size.Width;
            scrollHeight = (float)scrollView.Frame.Size.Height;

            scrollView.UserInteractionEnabled = true;
            scrollView.Delegate = new ScrollViewDelegate(this);
            scrollView.PagingEnabled = true;
            scrollView.ShowsHorizontalScrollIndicator = false;
            scrollView.ShowsVerticalScrollIndicator = false;

            for (int index = 0; index < onboardImages.Length; index++)
            {
                float xOrigin = (float)(scrollWidth * index);

                var slide = new UIView(new CGRect(xOrigin, 0, scrollWidth, scrollHeight));

                var imageView = new UIImageView(onboardImages[index]);
                imageView.Frame = new CGRect(0, 0, scrollWidth, scrollHeight / 2);
                imageView.ContentMode = UIViewContentMode.ScaleAspectFit;

                var descLabel = new UILabel();
                descLabel.TranslatesAutoresizingMaskIntoConstraints = false;
                descLabel.TextAlignment = UITextAlignment.Center;
                descLabel.Lines = 0;
                descLabel.Font = UIFont.SystemFontOfSize(23);


                string description = onboardDescriptions[index];
                switch (index)
                {
                    case 0:
                        NSAttributedString attr0 = description.AttributedStringWithColor(new string[] { AppStrings.MultipleData, AppStrings.IdScan }, UIColor.FromRGB(12, 84, 197));
                        descLabel.AttributedText = attr0;
                        break;
                    case 1:
                        NSAttributedString attr1 = description.AttributedStringWithColor(new string[] { AppStrings.MultipleData, AppStrings.ArMeasurement }, UIColor.FromRGB(12, 84, 197));
                        descLabel.AttributedText = attr1;
                        break;
                    case 2:
                        NSAttributedString attr2 = description.AttributedStringWithColor(new string[] { AppStrings.MultipleData, AppStrings.TextCapture }, UIColor.FromRGB(12, 84, 197));
                        descLabel.AttributedText = attr2;
                        break;
                    case 3:
                        NSAttributedString attr3 = description.AttributedStringWithColor(new string[] { AppStrings.MultipleData, AppStrings.BarCode }, UIColor.FromRGB(12, 84, 197));
                        descLabel.AttributedText = attr3;
                        break;
                    default:
                        descLabel.Text = onboardDescriptions[index];
                        break;
                }

                slide.AddSubview(imageView);
                slide.AddSubview(descLabel);

                imageView.TopAnchor.ConstraintEqualTo(slide.TopAnchor).Active = true;
                imageView.LeftAnchor.ConstraintEqualTo(slide.LeftAnchor).Active = true;
                imageView.RightAnchor.ConstraintEqualTo(slide.RightAnchor).Active = true;
                imageView.HeightAnchor.ConstraintEqualTo(scrollHeight / 2).Active = true;

                descLabel.TopAnchor.ConstraintEqualTo(imageView.BottomAnchor).Active = true;
                descLabel.LeftAnchor.ConstraintEqualTo(slide.LeftAnchor, 25).Active = true;
                descLabel.RightAnchor.ConstraintEqualTo(slide.RightAnchor, -25).Active = true;
                descLabel.HeightAnchor.ConstraintEqualTo(200).Active = true;

                scrollView.AddSubview(slide);
            }
            scrollView.ContentSize = new CGSize(scrollWidth * onboardImages.Length, scrollHeight);

            pageControl.Hidden = false;
            pageControl.Pages = onboardImages.Length;
            pageControl.CurrentPage = 0;

        }

        private void HandleImageTapped()
        {
            
            UIStoryboard storyboard = UIStoryboard.FromName("Main", null);
            HomeViewController vc = storyboard.InstantiateViewController("HomeViewController") as HomeViewController;

            if (vc != null)
            {
                this.NavigationController.PushViewController(vc, true);
            }
        }

      
        public static OnBoardingViewController InitWithStory()
        {
            UIStoryboard storyboard = UIStoryboard.FromName("Main", null);
            OnBoardingViewController vc = storyboard.InstantiateViewController("OnBoardingViewController") as OnBoardingViewController;
            return vc;
        }
        public void SetIndiactorForCurrentPage()
        {
            var page = myscrollView.ContentOffset.X / scrollWidth;
            pageControl.CurrentPage = (int)page;

            DispatchQueue.MainQueue.DispatchAsync(() =>
            {
                skipBtn.Image = skipImages[pageControl.CurrentPage];
                int pages = (int)pageControl.CurrentPage;
                scrollView.SetContentOffset(new CGPoint(pages * scrollWidth, 0), true);
            });
        }
    }

    class ScrollViewDelegate : UIScrollViewDelegate
    {
        private readonly OnBoardingViewController parentViewController;

        public ScrollViewDelegate(OnBoardingViewController parentViewController)
        {
            this.parentViewController = parentViewController;
        }

        public override void Scrolled(UIScrollView scrollView)
        {
            //Console.WriteLine(scrollView.ContentOffset);
            parentViewController.SetIndiactorForCurrentPage();
        }

     
    }

}
